name: Flask Web App CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  clean-workspace:
    runs-on: ubuntu-latest
    steps:
      - name: Clean workspace
        uses: actions/checkout@v4
        with:
          clean: true

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v4
      - name: Validate HTML & CSS
        run: echo "Static HTML/CSS site - no tests to run"

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout backend code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.5'
      - name: Install dependencies and test
      
        run: |
          pip install --upgrade pip 
          pip install -r requirements.txt
          flake8
          #pytest

        env:
          FLASK_ENV: testing

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend
          args:
            -Dsonar.organization=mohd-1995
            -Dsonar.projectKey=mohd-1995_AWS-CICD
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=.
            -Dsonar.language=py
            -Dsonar.verbose=true
  
  frontend-security:
    needs: backend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      
      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif
        continue-on-error: true


  backend-security:
    needs: backend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      
      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk for Python vulnerabilities
        run: snyk code test --file=requirements.txt --package-manager=pip
        continue-on-error: true

      
  frontend-image:
    needs: frontend-security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend image 
      working-directory: ./frontend
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/frontend-sre:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend-sre:latest
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/frontend-sre'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Install Snyk CLI
      uses: snyk/actions/setup@master
      env:
        snyk-token: ${{ secrets.SNYK_TOKEN }}
       
    - name: Snyk Authenticate    
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
  
    - name: Snyk Container monitor
      run: snyk container monitor ${{ secrets.DOCKER_USERNAME }}/frontend-sre --file=Dockerfile   
      working-directory: ./frontend

    - name: Run Snyk to check for vulnerabilities in the Docker image
      uses: snyk/actions/docker@master
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/frontend-sre
        args: --file=quiz-app/Dockerfile --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

  backend-image:
    needs: frontend-security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image 
      working-directory: ./backend
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/backend-sre:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/backend-sre:latest
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/backend-sre'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Install Snyk CLI
      uses: snyk/actions/setup@master
      env:
        snyk-token: ${{ secrets.SNYK_TOKEN }}
       
    - name: Snyk Authenticate    
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
  
    - name: Snyk Container monitor
      run: snyk container monitor ${{ secrets.DOCKER_USERNAME }}/backend-sre --file=Dockerfile   
      working-directory: ./backend

    - name: Run Snyk to check for vulnerabilities in the Docker image
      uses: snyk/actions/docker@master
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/backend-sre
        args: --file=quiz-app/Dockerfile --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true
  
  
  k8s-manifest-scan:
    needs: [backend-security, frontend-security]
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
      - name: Run Synk to check kubernetes manifest file for issues
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: $ {{ secrets.SNYK_TOKEN }}
        with:
          file: helm-charts/templates
          args: --severity-threshold=high

