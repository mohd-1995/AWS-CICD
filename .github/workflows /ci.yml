name: Flask Web App CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  clean-workspace:
    runs-on: ubuntu-latest
    steps:
      - name: Clean workspace
        uses: actions/checkout@v4
        with:
          clean: true

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v4
      
      - name: Validate HTML & CSS (Optional)
        run: echo "Static HTML/CSS site - no tests to run"
        
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout backend code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          flake8 .
          pytest
        env:
          FLASK_ENV: testing

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=.
            -Dsonar.language=py
            -Dsonar.verbose=true

  backend-security:
    needs: backend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk for Python vulnerabilities
        run: snyk test --file=requirements.txt --package-manager=pip
        continue-on-error: true

  frontend-image:
    runs-on: ubuntu-latest
    needs: frontend-test
    steps:
      - uses: actions/checkout@v4

      - name: Build and push frontend Docker image
        working-directory: ./frontend
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/frontend-static
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-static

      - name: Trivy scan for frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/frontend-static'
          format: 'sarif'
          output: 'trivy-frontend.sarif'
          severity: 'CRITICAL,HIGH'

  backend-image:
    needs: backend-security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and push backend Docker image
        working-directory: ./backend
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/flask-backend
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-backend

      - name: Trivy scan for backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/flask-backend'
          format: 'sarif'
          output: 'trivy-backend.sarif'
          severity: 'CRITICAL,HIGH'

  k8s-manifest-scan:
    needs: [frontend-image, backend-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Snyk Kubernetes IaC Scan
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: ./k8s-manifests/
          args: --severity-threshold=high
